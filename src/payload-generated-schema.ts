/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_vehicles_vehicles_modifications_type = pgEnum(
  'enum_vehicles_vehicles_modifications_type',
  [
    'Engine',
    'Exhaust',
    'Suspension',
    'Brakes',
    'Interior',
    'Exterior',
    'Electronics',
    'Wheels/Tires',
    'Forced Induction',
    'Fuel System',
  ],
)
export const enum_vehicles_vehicles_drivetrain = pgEnum('enum_vehicles_vehicles_drivetrain', [
  'fwd',
  'rwd',
  'awd',
  '4wd',
])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const brand = pgTable(
  'brand',
  {
    id: serial('id').primaryKey(),
    make: varchar('make').notNull(),
    photos: integer('photos_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    notes: varchar('notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    brand_photos_idx: index('brand_photos_idx').on(columns.photos),
    brand_updated_at_idx: index('brand_updated_at_idx').on(columns.updatedAt),
    brand_created_at_idx: index('brand_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    brandID: integer('brand_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_brand_id_idx: index(
      'payload_locked_documents_rels_brand_id_idx',
    ).on(columns.brandID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    brandIdFk: foreignKey({
      columns: [columns['brandID']],
      foreignColumns: [brand.id],
      name: 'payload_locked_documents_rels_brand_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const photo_bar_images = pgTable(
  'photo_bar_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    caption: varchar('caption'),
  },
  (columns) => ({
    _orderIdx: index('photo_bar_images_order_idx').on(columns._order),
    _parentIDIdx: index('photo_bar_images_parent_id_idx').on(columns._parentID),
    photo_bar_images_image_idx: index('photo_bar_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [photo_bar.id],
      name: 'photo_bar_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const photo_bar = pgTable('photo_bar', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const brands_brands = pgTable(
  'brands_brands',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    make: varchar('make').notNull(),
    photos: integer('photos_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    notes: varchar('notes'),
  },
  (columns) => ({
    _orderIdx: index('brands_brands_order_idx').on(columns._order),
    _parentIDIdx: index('brands_brands_parent_id_idx').on(columns._parentID),
    brands_brands_photos_idx: index('brands_brands_photos_idx').on(columns.photos),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [brands.id],
      name: 'brands_brands_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const brands = pgTable('brands', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const gallery_images = pgTable(
  'gallery_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('gallery_images_order_idx').on(columns._order),
    _parentIDIdx: index('gallery_images_parent_id_idx').on(columns._parentID),
    gallery_images_image_idx: index('gallery_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [gallery.id],
      name: 'gallery_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const gallery = pgTable('gallery', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const vehicles_vehicles_modifications = pgTable(
  'vehicles_vehicles_modifications',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_vehicles_vehicles_modifications_type('type'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('vehicles_vehicles_modifications_order_idx').on(columns._order),
    _parentIDIdx: index('vehicles_vehicles_modifications_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [vehicles_vehicles.id],
      name: 'vehicles_vehicles_modifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const vehicles_vehicles = pgTable(
  'vehicles_vehicles',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    make: varchar('make'),
    model: varchar('model'),
    year: numeric('year'),
    engineType: varchar('engine_type'),
    transmission: varchar('transmission'),
    drivetrain: enum_vehicles_vehicles_drivetrain('drivetrain'),
    photos: integer('photos_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    notes: varchar('notes'),
  },
  (columns) => ({
    _orderIdx: index('vehicles_vehicles_order_idx').on(columns._order),
    _parentIDIdx: index('vehicles_vehicles_parent_id_idx').on(columns._parentID),
    vehicles_vehicles_photos_idx: index('vehicles_vehicles_photos_idx').on(columns.photos),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [vehicles.id],
      name: 'vehicles_vehicles_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const vehicles = pgTable('vehicles', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_brand = relations(brand, ({ one }) => ({
  photos: one(media, {
    fields: [brand.photos],
    references: [media.id],
    relationName: 'photos',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    brandID: one(brand, {
      fields: [payload_locked_documents_rels.brandID],
      references: [brand.id],
      relationName: 'brand',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_photo_bar_images = relations(photo_bar_images, ({ one }) => ({
  _parentID: one(photo_bar, {
    fields: [photo_bar_images._parentID],
    references: [photo_bar.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [photo_bar_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_photo_bar = relations(photo_bar, ({ many }) => ({
  images: many(photo_bar_images, {
    relationName: 'images',
  }),
}))
export const relations_brands_brands = relations(brands_brands, ({ one }) => ({
  _parentID: one(brands, {
    fields: [brands_brands._parentID],
    references: [brands.id],
    relationName: 'brands',
  }),
  photos: one(media, {
    fields: [brands_brands.photos],
    references: [media.id],
    relationName: 'photos',
  }),
}))
export const relations_brands = relations(brands, ({ many }) => ({
  brands: many(brands_brands, {
    relationName: 'brands',
  }),
}))
export const relations_gallery_images = relations(gallery_images, ({ one }) => ({
  _parentID: one(gallery, {
    fields: [gallery_images._parentID],
    references: [gallery.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [gallery_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_gallery = relations(gallery, ({ many }) => ({
  images: many(gallery_images, {
    relationName: 'images',
  }),
}))
export const relations_vehicles_vehicles_modifications = relations(
  vehicles_vehicles_modifications,
  ({ one }) => ({
    _parentID: one(vehicles_vehicles, {
      fields: [vehicles_vehicles_modifications._parentID],
      references: [vehicles_vehicles.id],
      relationName: 'modifications',
    }),
  }),
)
export const relations_vehicles_vehicles = relations(vehicles_vehicles, ({ one, many }) => ({
  _parentID: one(vehicles, {
    fields: [vehicles_vehicles._parentID],
    references: [vehicles.id],
    relationName: 'vehicles',
  }),
  modifications: many(vehicles_vehicles_modifications, {
    relationName: 'modifications',
  }),
  photos: one(media, {
    fields: [vehicles_vehicles.photos],
    references: [media.id],
    relationName: 'photos',
  }),
}))
export const relations_vehicles = relations(vehicles, ({ many }) => ({
  vehicles: many(vehicles_vehicles, {
    relationName: 'vehicles',
  }),
}))

type DatabaseSchema = {
  enum_vehicles_vehicles_modifications_type: typeof enum_vehicles_vehicles_modifications_type
  enum_vehicles_vehicles_drivetrain: typeof enum_vehicles_vehicles_drivetrain
  users: typeof users
  media: typeof media
  brand: typeof brand
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  photo_bar_images: typeof photo_bar_images
  photo_bar: typeof photo_bar
  brands_brands: typeof brands_brands
  brands: typeof brands
  gallery_images: typeof gallery_images
  gallery: typeof gallery
  vehicles_vehicles_modifications: typeof vehicles_vehicles_modifications
  vehicles_vehicles: typeof vehicles_vehicles
  vehicles: typeof vehicles
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_brand: typeof relations_brand
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_photo_bar_images: typeof relations_photo_bar_images
  relations_photo_bar: typeof relations_photo_bar
  relations_brands_brands: typeof relations_brands_brands
  relations_brands: typeof relations_brands
  relations_gallery_images: typeof relations_gallery_images
  relations_gallery: typeof relations_gallery
  relations_vehicles_vehicles_modifications: typeof relations_vehicles_vehicles_modifications
  relations_vehicles_vehicles: typeof relations_vehicles_vehicles
  relations_vehicles: typeof relations_vehicles
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
